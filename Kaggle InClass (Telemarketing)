{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Maxim\\Anaconda3\\lib\\site-packages\\sklearn\\cross_validation.py:44: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n",
      "C:\\Users\\Maxim\\Anaconda3\\lib\\site-packages\\sklearn\\grid_search.py:43: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. This module will be removed in 0.20.\n",
      "  DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "% matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.cross_validation import StratifiedKFold\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "import xgboost as xgb\n",
    "from xgboost.sklearn import XGBClassifier\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from sklearn.ensemble import VotingClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Предобработка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "tr_data = pd.read_csv('train_data.csv')\n",
    "tr_target = pd.read_csv('train_target.csv', names='y')\n",
    "\n",
    "d = tr_data.join(tr_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>...</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>poutcome</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>26</td>\n",
       "      <td>student</td>\n",
       "      <td>single</td>\n",
       "      <td>high.school</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.961</td>\n",
       "      <td>5228.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>46</td>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>aug</td>\n",
       "      <td>tue</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>93.444</td>\n",
       "      <td>-36.1</td>\n",
       "      <td>4.963</td>\n",
       "      <td>5228.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>49</td>\n",
       "      <td>blue-collar</td>\n",
       "      <td>married</td>\n",
       "      <td>basic.4y</td>\n",
       "      <td>unknown</td>\n",
       "      <td>yes</td>\n",
       "      <td>yes</td>\n",
       "      <td>telephone</td>\n",
       "      <td>jun</td>\n",
       "      <td>tue</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>1.4</td>\n",
       "      <td>94.465</td>\n",
       "      <td>-41.8</td>\n",
       "      <td>4.864</td>\n",
       "      <td>5228.1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>31</td>\n",
       "      <td>technician</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>jul</td>\n",
       "      <td>tue</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-2.9</td>\n",
       "      <td>92.469</td>\n",
       "      <td>-33.6</td>\n",
       "      <td>1.044</td>\n",
       "      <td>5076.2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>42</td>\n",
       "      <td>housemaid</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>telephone</td>\n",
       "      <td>nov</td>\n",
       "      <td>mon</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>999</td>\n",
       "      <td>0</td>\n",
       "      <td>nonexistent</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>93.200</td>\n",
       "      <td>-42.0</td>\n",
       "      <td>4.191</td>\n",
       "      <td>5195.8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age          job  marital          education  default housing loan  \\\n",
       "0   26      student   single        high.school       no      no   no   \n",
       "1   46       admin.  married  university.degree       no     yes   no   \n",
       "2   49  blue-collar  married           basic.4y  unknown     yes  yes   \n",
       "3   31   technician  married  university.degree       no      no   no   \n",
       "4   42    housemaid  married  university.degree       no     yes   no   \n",
       "\n",
       "     contact month day_of_week ...  campaign  pdays  previous     poutcome  \\\n",
       "0  telephone   jun         mon ...         1    999         0  nonexistent   \n",
       "1   cellular   aug         tue ...         2    999         0  nonexistent   \n",
       "2  telephone   jun         tue ...         5    999         0  nonexistent   \n",
       "3   cellular   jul         tue ...         1    999         0  nonexistent   \n",
       "4  telephone   nov         mon ...         1    999         0  nonexistent   \n",
       "\n",
       "  emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  nr.employed  y  \n",
       "0          1.4          94.465          -41.8      4.961       5228.1  1  \n",
       "1          1.4          93.444          -36.1      4.963       5228.1  0  \n",
       "2          1.4          94.465          -41.8      4.864       5228.1  0  \n",
       "3         -2.9          92.469          -33.6      1.044       5076.2  0  \n",
       "4         -0.1          93.200          -42.0      4.191       5195.8  0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nominal columns: ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome']\n",
      "\n",
      "Numerical columns: ['age', 'duration', 'campaign', 'pdays', 'previous', 'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed']\n"
     ]
    }
   ],
   "source": [
    "# Nominal columns\n",
    "nom_cols = [c for c in tr_data.columns if tr_data[c].dtype.name == 'object']\n",
    "print(\"Nominal columns:\", nom_cols)\n",
    "\n",
    "# Numerical columns\n",
    "num_cols   = [c for c in tr_data.columns if tr_data[c].dtype.name != 'object']\n",
    "print(\"\\nNumerical columns:\", num_cols)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как можно заметить выше, в датасете присутствует довольно большое количество категориальных признаков, которые требуют обработки."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на числовые признаки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.000000</td>\n",
       "      <td>27595.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>40.085994</td>\n",
       "      <td>258.874542</td>\n",
       "      <td>2.568328</td>\n",
       "      <td>962.693169</td>\n",
       "      <td>0.172024</td>\n",
       "      <td>0.087211</td>\n",
       "      <td>93.577443</td>\n",
       "      <td>-40.503026</td>\n",
       "      <td>3.628844</td>\n",
       "      <td>5167.31696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.480548</td>\n",
       "      <td>260.511236</td>\n",
       "      <td>2.765561</td>\n",
       "      <td>186.371948</td>\n",
       "      <td>0.492548</td>\n",
       "      <td>1.567343</td>\n",
       "      <td>0.578193</td>\n",
       "      <td>4.616641</td>\n",
       "      <td>1.730084</td>\n",
       "      <td>72.22960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.400000</td>\n",
       "      <td>92.201000</td>\n",
       "      <td>-50.800000</td>\n",
       "      <td>0.634000</td>\n",
       "      <td>4963.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>101.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.800000</td>\n",
       "      <td>93.075000</td>\n",
       "      <td>-42.700000</td>\n",
       "      <td>1.344000</td>\n",
       "      <td>5099.10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>38.000000</td>\n",
       "      <td>179.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>93.749000</td>\n",
       "      <td>-41.800000</td>\n",
       "      <td>4.857000</td>\n",
       "      <td>5191.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>47.000000</td>\n",
       "      <td>320.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>93.994000</td>\n",
       "      <td>-36.400000</td>\n",
       "      <td>4.961000</td>\n",
       "      <td>5228.10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>94.000000</td>\n",
       "      <td>4199.000000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>94.767000</td>\n",
       "      <td>-26.900000</td>\n",
       "      <td>5.045000</td>\n",
       "      <td>5228.10000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age      duration      campaign         pdays      previous  \\\n",
       "count  27595.000000  27595.000000  27595.000000  27595.000000  27595.000000   \n",
       "mean      40.085994    258.874542      2.568328    962.693169      0.172024   \n",
       "std       10.480548    260.511236      2.765561    186.371948      0.492548   \n",
       "min       17.000000      0.000000      1.000000      0.000000      0.000000   \n",
       "25%       32.000000    101.000000      1.000000    999.000000      0.000000   \n",
       "50%       38.000000    179.000000      2.000000    999.000000      0.000000   \n",
       "75%       47.000000    320.000000      3.000000    999.000000      0.000000   \n",
       "max       94.000000   4199.000000     43.000000    999.000000      7.000000   \n",
       "\n",
       "       emp.var.rate  cons.price.idx  cons.conf.idx     euribor3m  nr.employed  \n",
       "count  27595.000000    27595.000000   27595.000000  27595.000000  27595.00000  \n",
       "mean       0.087211       93.577443     -40.503026      3.628844   5167.31696  \n",
       "std        1.567343        0.578193       4.616641      1.730084     72.22960  \n",
       "min       -3.400000       92.201000     -50.800000      0.634000   4963.60000  \n",
       "25%       -1.800000       93.075000     -42.700000      1.344000   5099.10000  \n",
       "50%        1.100000       93.749000     -41.800000      4.857000   5191.00000  \n",
       "75%        1.400000       93.994000     -36.400000      4.961000   5228.10000  \n",
       "max        1.400000       94.767000     -26.900000      5.045000   5228.10000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr_data[num_cols].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что среди значений признаков есть большой разброс. Это значит, что, вероятно, будет необходимо провести стандартизацию."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь посмотрим на категориальные признаки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job</th>\n",
       "      <th>marital</th>\n",
       "      <th>education</th>\n",
       "      <th>default</th>\n",
       "      <th>housing</th>\n",
       "      <th>loan</th>\n",
       "      <th>contact</th>\n",
       "      <th>month</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>poutcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "      <td>27595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>admin.</td>\n",
       "      <td>married</td>\n",
       "      <td>university.degree</td>\n",
       "      <td>no</td>\n",
       "      <td>yes</td>\n",
       "      <td>no</td>\n",
       "      <td>cellular</td>\n",
       "      <td>may</td>\n",
       "      <td>thu</td>\n",
       "      <td>nonexistent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>6996</td>\n",
       "      <td>16692</td>\n",
       "      <td>8128</td>\n",
       "      <td>21800</td>\n",
       "      <td>14375</td>\n",
       "      <td>22763</td>\n",
       "      <td>17499</td>\n",
       "      <td>9126</td>\n",
       "      <td>5825</td>\n",
       "      <td>23842</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           job  marital          education default housing   loan   contact  \\\n",
       "count    27595    27595              27595   27595   27595  27595     27595   \n",
       "unique      12        4                  8       3       3      3         2   \n",
       "top     admin.  married  university.degree      no     yes     no  cellular   \n",
       "freq      6996    16692               8128   21800   14375  22763     17499   \n",
       "\n",
       "        month day_of_week     poutcome  \n",
       "count   27595       27595        27595  \n",
       "unique     10           5            3  \n",
       "top       may         thu  nonexistent  \n",
       "freq     9126        5825        23842  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr_data[nom_cols].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заметно, что большинство категориальных признаков имеют больше двух значений, поэтому их лучше закодировать через one hot encoding. К признаку contact применим бинарное кодирование."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Изучим корреляции между признаками."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>duration</th>\n",
       "      <th>campaign</th>\n",
       "      <th>pdays</th>\n",
       "      <th>previous</th>\n",
       "      <th>emp.var.rate</th>\n",
       "      <th>cons.price.idx</th>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <th>euribor3m</th>\n",
       "      <th>nr.employed</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.001599</td>\n",
       "      <td>0.003293</td>\n",
       "      <td>-0.033785</td>\n",
       "      <td>0.028606</td>\n",
       "      <td>-0.008147</td>\n",
       "      <td>-0.003434</td>\n",
       "      <td>0.127855</td>\n",
       "      <td>0.002453</td>\n",
       "      <td>-0.027026</td>\n",
       "      <td>0.032164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>0.001599</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.075007</td>\n",
       "      <td>-0.044087</td>\n",
       "      <td>0.020867</td>\n",
       "      <td>-0.034308</td>\n",
       "      <td>0.001166</td>\n",
       "      <td>-0.012445</td>\n",
       "      <td>-0.039330</td>\n",
       "      <td>-0.049034</td>\n",
       "      <td>0.408124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>campaign</th>\n",
       "      <td>0.003293</td>\n",
       "      <td>-0.075007</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.054159</td>\n",
       "      <td>-0.081778</td>\n",
       "      <td>0.152108</td>\n",
       "      <td>0.129243</td>\n",
       "      <td>-0.014175</td>\n",
       "      <td>0.136463</td>\n",
       "      <td>0.144706</td>\n",
       "      <td>-0.071472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pdays</th>\n",
       "      <td>-0.033785</td>\n",
       "      <td>-0.044087</td>\n",
       "      <td>0.054159</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.586289</td>\n",
       "      <td>0.268983</td>\n",
       "      <td>0.077936</td>\n",
       "      <td>-0.087054</td>\n",
       "      <td>0.295745</td>\n",
       "      <td>0.370658</td>\n",
       "      <td>-0.326604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>previous</th>\n",
       "      <td>0.028606</td>\n",
       "      <td>0.020867</td>\n",
       "      <td>-0.081778</td>\n",
       "      <td>-0.586289</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.422226</td>\n",
       "      <td>-0.203558</td>\n",
       "      <td>-0.049921</td>\n",
       "      <td>-0.457293</td>\n",
       "      <td>-0.503885</td>\n",
       "      <td>0.233072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>emp.var.rate</th>\n",
       "      <td>-0.008147</td>\n",
       "      <td>-0.034308</td>\n",
       "      <td>0.152108</td>\n",
       "      <td>0.268983</td>\n",
       "      <td>-0.422226</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.773356</td>\n",
       "      <td>0.197029</td>\n",
       "      <td>0.971966</td>\n",
       "      <td>0.906407</td>\n",
       "      <td>-0.299526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cons.price.idx</th>\n",
       "      <td>-0.003434</td>\n",
       "      <td>0.001166</td>\n",
       "      <td>0.129243</td>\n",
       "      <td>0.077936</td>\n",
       "      <td>-0.203558</td>\n",
       "      <td>0.773356</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.058647</td>\n",
       "      <td>0.685298</td>\n",
       "      <td>0.519069</td>\n",
       "      <td>-0.136918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cons.conf.idx</th>\n",
       "      <td>0.127855</td>\n",
       "      <td>-0.012445</td>\n",
       "      <td>-0.014175</td>\n",
       "      <td>-0.087054</td>\n",
       "      <td>-0.049921</td>\n",
       "      <td>0.197029</td>\n",
       "      <td>0.058647</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.277765</td>\n",
       "      <td>0.100704</td>\n",
       "      <td>0.051229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>euribor3m</th>\n",
       "      <td>0.002453</td>\n",
       "      <td>-0.039330</td>\n",
       "      <td>0.136463</td>\n",
       "      <td>0.295745</td>\n",
       "      <td>-0.457293</td>\n",
       "      <td>0.971966</td>\n",
       "      <td>0.685298</td>\n",
       "      <td>0.277765</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.945204</td>\n",
       "      <td>-0.308978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nr.employed</th>\n",
       "      <td>-0.027026</td>\n",
       "      <td>-0.049034</td>\n",
       "      <td>0.144706</td>\n",
       "      <td>0.370658</td>\n",
       "      <td>-0.503885</td>\n",
       "      <td>0.906407</td>\n",
       "      <td>0.519069</td>\n",
       "      <td>0.100704</td>\n",
       "      <td>0.945204</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.353859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y</th>\n",
       "      <td>0.032164</td>\n",
       "      <td>0.408124</td>\n",
       "      <td>-0.071472</td>\n",
       "      <td>-0.326604</td>\n",
       "      <td>0.233072</td>\n",
       "      <td>-0.299526</td>\n",
       "      <td>-0.136918</td>\n",
       "      <td>0.051229</td>\n",
       "      <td>-0.308978</td>\n",
       "      <td>-0.353859</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     age  duration  campaign     pdays  previous  \\\n",
       "age             1.000000  0.001599  0.003293 -0.033785  0.028606   \n",
       "duration        0.001599  1.000000 -0.075007 -0.044087  0.020867   \n",
       "campaign        0.003293 -0.075007  1.000000  0.054159 -0.081778   \n",
       "pdays          -0.033785 -0.044087  0.054159  1.000000 -0.586289   \n",
       "previous        0.028606  0.020867 -0.081778 -0.586289  1.000000   \n",
       "emp.var.rate   -0.008147 -0.034308  0.152108  0.268983 -0.422226   \n",
       "cons.price.idx -0.003434  0.001166  0.129243  0.077936 -0.203558   \n",
       "cons.conf.idx   0.127855 -0.012445 -0.014175 -0.087054 -0.049921   \n",
       "euribor3m       0.002453 -0.039330  0.136463  0.295745 -0.457293   \n",
       "nr.employed    -0.027026 -0.049034  0.144706  0.370658 -0.503885   \n",
       "y               0.032164  0.408124 -0.071472 -0.326604  0.233072   \n",
       "\n",
       "                emp.var.rate  cons.price.idx  cons.conf.idx  euribor3m  \\\n",
       "age                -0.008147       -0.003434       0.127855   0.002453   \n",
       "duration           -0.034308        0.001166      -0.012445  -0.039330   \n",
       "campaign            0.152108        0.129243      -0.014175   0.136463   \n",
       "pdays               0.268983        0.077936      -0.087054   0.295745   \n",
       "previous           -0.422226       -0.203558      -0.049921  -0.457293   \n",
       "emp.var.rate        1.000000        0.773356       0.197029   0.971966   \n",
       "cons.price.idx      0.773356        1.000000       0.058647   0.685298   \n",
       "cons.conf.idx       0.197029        0.058647       1.000000   0.277765   \n",
       "euribor3m           0.971966        0.685298       0.277765   1.000000   \n",
       "nr.employed         0.906407        0.519069       0.100704   0.945204   \n",
       "y                  -0.299526       -0.136918       0.051229  -0.308978   \n",
       "\n",
       "                nr.employed         y  \n",
       "age               -0.027026  0.032164  \n",
       "duration          -0.049034  0.408124  \n",
       "campaign           0.144706 -0.071472  \n",
       "pdays              0.370658 -0.326604  \n",
       "previous          -0.503885  0.233072  \n",
       "emp.var.rate       0.906407 -0.299526  \n",
       "cons.price.idx     0.519069 -0.136918  \n",
       "cons.conf.idx      0.100704  0.051229  \n",
       "euribor3m          0.945204 -0.308978  \n",
       "nr.employed        1.000000 -0.353859  \n",
       "y                 -0.353859  1.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как можно заметить, наибольшую связь с целевым признаком имеет признак duration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84422DD8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84150080>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA8418E7B8>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000001CA841DE128>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84218940>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84268668>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84160DD8>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA84464828>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA844AFD68>],\n",
       "       [<matplotlib.axes._subplots.AxesSubplot object at 0x000001CA844EDE48>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA8453E898>,\n",
       "        <matplotlib.axes._subplots.AxesSubplot object at 0x000001CA8457AA20>]], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nnGFdW+o1+icRsZH+a3Qe+E2wrml5Da0PS772I+KzwJUR8Rr6/6NOBcjMmyPiSuBmdr1eap3uKyIu\nB+aAR0d/bY1zgLcDfzlm+V8HXER/mtotmXn1LOMYWCaeFyx1PSo9noh4LvArwE3RXysq6U+LdT7j\n16+S43lFE88P8BPAxRGxD/1r1gczc0tEXEfzzs9ysVzS0HOznLfTvHOznHe07NyoDA++19EevX2p\nvgjt1ZL9hfUWqWwRcQr9vD0G+NuI2JaZL6u5WEVq6HvJ2i313ikz319vqcq23HualbarouZ+AUmS\nJEmSJEmSJGnmipluUZIkSZIkSZIkSZoVB8kkSZIkSZIkSZLUOQ6SSZIkSZIkSZIkqXMcJJMkSZIk\nSZIkSVLnOEgmSZIkSZIkSZKkznGQTJIkSZIkSZIkSZ3jIJkkSZIkSZIkSZI6x0EySZIkSZIkSZIk\ndY6DZJIkSZIkSZIkSeocB8kkSZIkSZIkSZLUOQ6SSZIkSZIkSZIkqXMcJJMkSZIkSZIkSVLnOEgm\nSZIkSZIkSZKkznGQTJIkSZIkSZIkSZ3jIJkkSZIkSZIkSZI6x0EySZIkSZIkSZIkdY6DZJIkSZIk\nSZIkSeocB8kkSZIkSZIkSZLUOQ6SSZIkSZIkSZIkqXMcJJMkSZIkSZIkSVLnOEgmSZIkSZIkSZKk\nznGQTJIkSZIkSZIkSZ3jIJkkSZIkSZIkSZI6x0EySZIkSZIkSZIkdY6DZJIkSZIkSZIkSeocB8kk\nSZIkSZIkSZLUOQ6SSZIkSZIkSZIkqXMcJJMkSZIkSZIkSVLnOEgmSZIkSZIkSZKkznGQTJIkSZIk\nSZIkSZ3jIJkkSZIkSZIkSZI6x0EySZIkSZIkSZIkdY6DZJIkSZIkSZIkSeocB8kkSZIkSZIkSZLU\nOQ6SSZIkSZIkSZIkqXMcJJMkSZIkSZIkSVLnOEgmSZIkSZIkSZKkznGQTJIkSZIkSZIkSZ3jIJkk\nSZIkSZIkSZI6x0EySZIkSZIkSZIkdY6DZJL2KCK+GBH/rvr5nIi4tO4ySZIkaZeI+P8i4lUz/pun\nR8QnZvk3JUmSpi0iHoiIJ9RdDkn1cZBM0h5l5tMy8++Hd03rd0fEGyPi/0TEPRFxZ0T8YUR4XZIk\nSWqGqbULJUmSamJ7Ruo4O6MlLSki1qzy798H+DDwU5l5EPA0YCPwhtX8u5IkSdO22u0mSZIkrZqo\n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\n0cjjzqr6xvWPPudLEXEi8PxxZ9dExNQvlZUkaaPITP8HvYciYifwJuAHRB1oOQAAIABJREFUR7qt\nuSRJKpQ1Vz9k5t9ExAD4YWBx+WqyairFr1QPO241l/WWJEnNTbPemvRKsmDlmS+PRcTrASLiDQzn\nZAb4KLAjIk6KiJcALwU+m5kHgIMRcX61wOnbgTtHnvOO6vaPM1wgdazM9KfmzxVXXNH5GPr2Y2bm\nZmZl/5hb/R/1xoqaKyJ+GPgZ4KIcLjS/zJqrsB+3S+ZmZmX/mJuZtfWjskXEfxMRL6hufwPwj4Ev\nMKyTdlYPewcr66fjVnN1/XndaD9u18x8I/yYuZlvhJ9pO+aVZBFxKzAHvDAiHgauAN4JfLA6I+bv\ngf+p2rk/GBG3Aw8CTwO78/CoLwNuAE4G9mXmXVX/dcDNEbEfeALYMZ1fTZIkqT/G1FzvA04CPjH8\n/oX7MnO3NZckSVIj3wLcWK1LdgLw4czcFxH3AbdHxKXAQ8B28HsuSZI2gmMeJMvMt4y567vGPP79\nwPuP0v8nwKuO0v8PVMWHjo+FhYWuh9A7ZtaMudVnZs2Ym9ajMTXX9as83pqrIG6XmjG3+sysGXOr\nz8y0HmXm54HzjtL/JPBDY55jzbVOuF1rn5m3z8zbZ+b9N+l0i+qx2dnZrofQO2bWjLnVZ2bNmJuk\n0rhdasbc6jOzZsytPjOTtN64XWufmbfPzNtn5v0Xx2MOx+MlIrJP45UkqRQRQbqIvCZkzSVJUjPW\nXJqU9ZYkSc1Mu97ySjJJkiRJkiRJkiRtOB4k2wAGg0HXQ+gdM2vG3Oozs2bMTVJp3C41Y271mVkz\n5lafmUlab9yutc/M22fm7TPz/vMgmSRJkiRJkiRJkjYc1ySTJGkDcH0M1WHNJUlSM9ZcmpT1liRJ\nzbgmmSRJkiRJkiRJkrRGHiTbAJwXtT4za8bc6jOzZsxNUmncLjVjbvWZWTPmVp+ZSVpv3K61z8zb\nZ+btM/P+8yCZJEmSJEmSJEmSNhzXJJMkaQNwfQzVYc0lSVIz1lyalPWWJEnNuCaZJEmSJEmSJEmS\ntEYeJNsAnBe1PjNrxtzqM7NmzE1SadwuNWNu9ZlZM+ZWn5lJWm/crrXPzNtn5u0z8/7zIJkkSZIk\nSZIkSZI2HNckkyRpA3B9DNVhzSVJUjPWXJqU9ZYkSc24JpkkSZIkSZIkSZK0Rh4k2wCcF7U+M2vG\n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\nGRH3Ae8G7gc+DnwwM++KiN3AKzNzd0TsAC7JzB1jxuGl6A34D7U+M2vG3Orrc2bdXpY94PABszKm\n1imdU/+oDmuu+vq8Pe+SudVnZs2YW32jmfVjOp4yakJrLk3Keqt97gvaZ+btM/P29TXzftR340y3\n3jrmQbKIuJXhN5EvBBaBKzLz+pH7/xL4ruWrvyJiL7ALeBq4PDPvrvpfA9wAnAzsy8zLq/6vB24G\nvhN4AtiRmQtjxmIBIUmFKGdnWsYXIqXzCxvVYc0lSRpVTt23mjJqQmsuTcp6S5LUpX7Ud+O0fJCs\nJBYQklSOcnamZXwhUjq/sFEd1lySpFHl1H2rKaMmtObSpKy3JEld6kd9N850660TpvVCKtdz1w7S\nsZhZM+ZWn5k1Neh6AJK0gtvzZsytPjNrxtzqMzNJ643btfaZefvMvH1m3n8eJJMkSZIkSZIkSdKG\n43SLkqRGyrksu4ypdUrn1D+qw5pLkjSqnLpvNWXUhNZcmpT1liSpS/2o78ZxukVJkiRJkiRJkiRp\nTTxItgE4L2p9ZtaMudVnZk0Nuh6AJK3g9rwZc6vPzJoxt/rMTNJ643atfWbePjNvn5n3nwfJJEmS\nJEmSJEmStOG4JpkkqZFy5i4uY/2J0rk+huqw5pIkjSqn7ltNGTWhNZcmZb0lSepSP+q7cVyTTJIk\nSZIkSZIkSVoTD5JtAM6LWp+ZNWNu9ZlZU4OuByBJK7g9b8bc6jOzZsytPjOTtN64XWufmbfPzNtn\n5v3nQTJJkiRJkiRJkiRtOK5JJklqpJy5i8tYf6J0ro+hOqy5JEmjyqn7VlNGTWjNpUlZb0mSutSP\n+m4c1ySTJEmSJEmSJEmS1sSDZBuA86LWZ2bNmFt9ZtbUoOsBSNIKbs+bMbf6zKwZc6vPzCStN27X\n2mfm7TPz9pl5/3mQTJIkSZIkSZIkSRuOa5JJkhopZ+7iMtafKJ3rY6gOay5J0qhy6r7VlFETWnNp\nUtZbkqQu9aO+G8c1ySRJkiRJkiRJkqQ1OeZBsoi4LiIWI+KBkb6rIuILETEfEb8TEc8fuW9vROyv\n7n/jSP95EfFARHwxIq4e6T8pIm6rnvPpiHjxNH9BOS9qE2bWjLnVZ2ZNDboegNSqiPjpiPjPVS11\nS1U/nRoRd0fEX0TEH0TEC0YeX6se09q5PW/G3Oozs2bMrT4z03oUEWdFxL0R8WcR8fmIeHfVP7W6\n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\nWXff3N27h9tfTXJNkpOTnJvkzcPd3pzkmcPtc5Jc1t13dveeJNcmOauqTkzy4O6+arjfpeses/5r\nvSvJqJdijaU/jjxXz1hyledqGUueAAAAAMC0w+pJVlWnJjkjyYeSnNDde5NJIS3Jw4e7nZTk+nUP\nu3EYOynJDevGbxjGph7T3Xcl2VdVDzuc2AAAAAAAAOBQHXKRrKoelMkqr5cOK8oObA42y2Zho+6Z\nsmvXrnmHsCPkuXrGkqs8V8tY8gQAAAAAph11KHeqqqMyKZC9pbvfMwzvraoTunvvsJXi3wzjNyb5\n9nUPP3kY22x8/WNuqqojkxzX3bdsHM3zk5w63H5IJgvbdg3Ha8O/8zm+885bs3v37px99mS3yP1b\neO1/A9axY8eOHTveqePdu3dn3759SZI9e/YEAAAAAJhW3QdfAFZVlyb5cnf/wrqx1yS5pbtfU1Uv\nT/LQ7r6wqh6X5K1JnpTJNorvS/KY7u6q+lCSlyS5KskfJ/mN7r6iqi5I8k+6+4KqOj/JM7v7/A3i\n6NkuWJut448/O+9+9yvvKZJt1dra2j1vdK4yea6eseQqz9UyljyrKt096pXaAAAAALDeQVeSVdVT\nkvx4kk9V1ScyqVK9Mslrkryjql6Q5Lok5yVJd19dVe9IcnWSO5Jc0PdW4l6U5E1JHpDk8u6+Yhi/\nJMlbquraJH+X5BsKZAAAAAAAADArh7SSbFGMZSUZAMyalWQAAAAAMO2IeQcAAAAAAAAAO02RbAGt\nra3NO4QdIc/VM5Zc5blaxpInAAAAADBNkQwAAAAAAIDR0ZNshvQkA2BR6UkGAAAAANOsJAMAAAAA\nAGB0FMkW0Fj648hz9YwlV3mulrHkCQAAAABMUyQDAAAAAABgdPQkmyE9yQBYVHqSAQAAAMA0K8kA\nAAAAAAAYHUWyBTSW/jjyXD1jyVWeq2UseQIAAAAA0xTJAAAAAAAAGB09yWZITzIAFpWeZAAAAAAw\nzUoyAAAAAAAARkeRbAGNpT+OPFfPWHKV52oZS54AAAAAwDRFMgAAAAAAAEZHT7IZ0pMMgEWlJxkA\nAAAATLOSDAAAAAAAgNFRJFtAY+mPI8/VM5Zc5blaxpInAAAAADBNkQwAAAAAAIDR0ZNshvQkA2BR\n6UkGAAAAANOsJAMAAAAAAGB0FMkW0Fj648hz9YwlV3mulrHkCQAAAABMUyQDAAAAAABgdPQkmyE9\n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\nr6r3zjuW7VJVe6rqL4ef6UfmHc92qarjq+qdVXXN8P/0SfOOaTtU1WnDz/Ljw7+3rfDz0c9X1aer\n6pNV9daqOnreMQEAAADAvC3FSrKqOiLJ5zPpWXZTkquSnN/dn51rYDNWVd+f5KtJLu3u75p3PNul\nqk5McmJ3766qByX5WJJzV+3nmSRVdWx33z703fsvSV7S3StZXKmqn0/yPUmO6+5z5h3PdqiqLyT5\nnu6+dd6xbKeqelOSP+3uN1bVUUmO7e6vzDmsbTX8nrkhyZO6+/p5xzNLVfWIJH+W5LHd/fWq+v0k\nf9zdl845NAAAAACYq2VZSXZWkmu7+7ruviPJZUnOnXNMM9fdf5Zkpd98T5Luvrm7dw+3v5rkmiQn\nzTeq7dHdtw83j8mkB+DiV6W3oKpOTvIjSd4w71i2WWV5nje3pKqOS/LPuvuNSdLdd656gWzwQ0n+\natUKZOscmeSB+4uemfzBCQAAAACM2rK82XtSkvVvXN6QFS2qjE1VnZrkjCQfnm8k22PYgvATSW5O\n8r7uvmreMW2T1yb511nRIuA6neR9VXVVVf3MvIPZJo9K8uWqeuOwDeHvVNU3zzuoHfDsJG+fdxDb\nobtvSvJrSb6Y5MYk+7r7/fONCgAAAADmb1mKZKygYavFdyV56bCibOV0993d/cQkJyd5UlU9bt4x\nzVpV/WiSvcPqwBo+VtVTuvvMTFbNvWjYInXVHJXkzCT/fsj19iQXzjek7VVV35TknCTvnHcs26Gq\nHpLJ6utTkjwiyYOq6rnzjQoAAAAA5m9ZimQ3JnnkuuOThzGW1LDl17uSvKW73zPveLbbsF3dB5M8\nfd6xbIOnJDln6Nf19iQ/WFUr2euou780/Pu3Sf4gk61gV80NSa7v7o8Ox+/KpGi2yp6R5GPDz3UV\n/VCSL3T3Ld19V5L/lOSfzjkmAAAAAJi7ZSmSXZXk0VV1SlUdneT8JO+dc0zbZdVX4uz3e0mu7u7X\nzTuQ/7+9O0bNIoqiAHyuWGgsLCIEGwuLrEGwCUjcgwiCjZW4gDTuQ5BgEUEI2ImkcAE2FopapYiV\naxC5FjMLEJk/DzPf18ww1YGZN8Uc3p1NqaobVXV9Pr+aZD/J97GpltfdB919q7tvZ1qbH7r70ehc\nS6uqrXn3Y6rqWpL7Sb6MTbW87v6Z5EdV7c6X7iX5OjDSeXiQCzpqcXaW5E5VXamqynRPvw3OBAAA\nAADDXR4d4G909++qeprkJFOx97K7L9wHvqp6nWQvyXZVnSV53t2HY1Mtr6ruJnmY5PP8v65OctDd\n78cmW9zNJK+q6lKm5/ZNd78bnIl/t5PkbVV1pnfnUXefDM60Kc+SHM1jCE+TPB6cZ2OqaivTTqsn\no7NsSnd/rKrjJJ+S/JqPL8amAgAAAIDxqrtHZwAAAAAAAIBz9b+MWwQAAAAAAIDFKMkAAAAAAABY\nHSUZAAAAAAAAq6MkAwAAAAAAYHWUZAAAAAAAAKyOkgwAAAAAAIDVUZIBAAAAAACwOkoyAAAAAAAA\nVucPAdlznPvpSboAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1ca8442d828>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tr_data.hist(figsize=(30,20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гистограммы числовых признаков показывают, что значения признаков имеют разные распределения, которые заметно отличаются от нормального."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на целевую переменную."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    24481\n",
       "1     3114\n",
       "Name: y, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tr_target.y.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заметен очевидный дисбаланс классов в выборке. Возможно, стоит попробовать искусственно её сбалансировать. Также стоит попробовать оценивать вероятности классов при предсказаниях."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Закодируем категориальные признаки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tr_data.at[tr_data['contact']=='cellular', 'contact'] = 0\n",
    "tr_data.at[tr_data['contact']=='telephone', 'contact'] = 1\n",
    "nom_cols.remove('contact')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One hot encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nominal features encoding started...\n",
      "   Feature job - encoded\n",
      "   Feature marital - encoded\n",
      "   Feature education - encoded\n",
      "   Feature default - encoded\n",
      "   Feature housing - encoded\n",
      "   Feature loan - encoded\n",
      "   Feature month - encoded\n",
      "   Feature day_of_week - encoded\n",
      "   Feature poutcome - encoded\n",
      "Nominal features encoding completed. Total features encoded:  9\n"
     ]
    }
   ],
   "source": [
    "def encode_nominal_features(df, column_names):\n",
    "\n",
    "    \"\"\"column_names - names of nominal features in dataframe, df - dataframe\"\"\"\n",
    "    \n",
    "    print(\"Nominal features encoding started...\")\n",
    "    for name in column_names:\n",
    "        # Get column index\n",
    "        index = df.columns.get_loc(name)\n",
    "        # One hot encoding\n",
    "        dummies = pd.get_dummies(df[df.columns[index]])\n",
    "        # Rename headers\n",
    "        headers = dummies.columns.tolist()\n",
    "        for header in headers:\n",
    "            if (name=='job'):\n",
    "                headers[headers.index(header)] = header + '_job'\n",
    "            elif (name=='marital'):\n",
    "                headers[headers.index(header)] = header + '_status'\n",
    "            elif (name=='education'):\n",
    "                headers[headers.index(header)] = header + '_education'\n",
    "            elif (name=='default'):\n",
    "                headers[headers.index(header)] = 'default_' + header\n",
    "            elif (name=='housing'):\n",
    "                headers[headers.index(header)] = 'housing_' + header\n",
    "            elif (name=='loan'):\n",
    "                headers[headers.index(header)] = 'loan_' + header\n",
    "            elif (name=='contact'):\n",
    "                headers[headers.index(header)] = header + '_contact'\n",
    "            elif (name=='month'):\n",
    "                headers[headers.index(header)] = header\n",
    "            elif (name=='day_of_week'):\n",
    "                headers[headers.index(header)] = header\n",
    "            elif (name=='poutcome'):\n",
    "                headers[headers.index(header)] = 'poutcome_' + header\n",
    "        dummies.columns = headers\n",
    "        # Join new features\n",
    "        df = df.join(dummies)\n",
    "        # Place new features after initial feature\n",
    "        cols = df.columns.tolist()\n",
    "        for header in headers[::-1]:\n",
    "            cols.insert(index+1, cols.pop(cols.index(header)))\n",
    "        # Reindex dataframe\n",
    "        df = df.reindex(columns=cols)\n",
    "        # Drop initial feature\n",
    "        df = df.drop(df.columns[index], axis=1)\n",
    "        print('   Feature %s - encoded' % name)\n",
    "    print(\"Nominal features encoding completed. Total features encoded: \", len(column_names))\n",
    "    return df\n",
    "\n",
    "tr_data = encode_nominal_features(tr_data, nom_cols)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Удалим столбец default_yes, поскольку в тестовых данных признак default не имеет этого значения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tr_data.drop('default_yes', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разобьем данные на тренировочную и валидационную (отложенную) выборку. Также сбалансируем тренировочную выборку, чтобы в ней было одинаковое количество объектов двух классов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "data_columns = tr_data.columns.tolist()\n",
    "X = tr_data.values\n",
    "y = tr_target.values.reshape((tr_target.values.shape[0],))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "OS = RandomOverSampler(random_state=2016)\n",
    "\n",
    "skf = StratifiedKFold(y, n_folds=10, shuffle=True, random_state=2016)\n",
    "for train_ind, valid_ind in skf:\n",
    "    X_train, X_valid = X[train_ind], X[valid_ind]\n",
    "    y_train, y_valid = y[train_ind], y[valid_ind]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "osX_train, osy_train = OS.fit_sample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Применение алгоритмов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для начала посмотрим на важности признаков."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature importances:\n",
      " 1. feature 'duration' (0.3457)\n",
      " 2. feature 'euribor3m' (0.0801)\n",
      " 3. feature 'age  ' (0.0604)\n",
      " 4. feature 'nr.employed' (0.0598)\n",
      " 5. feature 'pdays' (0.0417)\n",
      " 6. feature 'cons.price.idx' (0.0372)\n",
      " 7. feature 'emp.var.rate' (0.0360)\n",
      " 8. feature 'campaign' (0.0312)\n",
      " 9. feature 'cons.conf.idx' (0.0290)\n",
      "10. feature 'poutcome_success' (0.0182)\n",
      "11. feature 'contact' (0.0133)\n",
      "12. feature 'previous' (0.0095)\n",
      "13. feature 'housing_yes' (0.0092)\n",
      "14. feature 'housing_no' (0.0088)\n",
      "15. feature 'university.degree_education' (0.0088)\n",
      "16. feature 'high.school_education' (0.0085)\n",
      "17. feature 'married_status' (0.0083)\n",
      "18. feature 'thu  ' (0.0082)\n",
      "19. feature 'mon  ' (0.0081)\n",
      "20. feature 'default_no' (0.0081)\n",
      "21. feature 'single_status' (0.0079)\n",
      "22. feature 'fri  ' (0.0079)\n",
      "23. feature 'admin._job' (0.0077)\n",
      "24. feature 'blue-collar_job' (0.0070)\n",
      "25. feature 'tue  ' (0.0069)\n",
      "26. feature 'wed  ' (0.0069)\n",
      "27. feature 'poutcome_failure' (0.0066)\n",
      "28. feature 'basic.9y_education' (0.0064)\n",
      "29. feature 'loan_no' (0.0064)\n",
      "30. feature 'technician_job' (0.0063)\n",
      "31. feature 'may  ' (0.0062)\n",
      "32. feature 'professional.course_education' (0.0061)\n",
      "33. feature 'loan_yes' (0.0061)\n",
      "34. feature 'divorced_status' (0.0059)\n",
      "35. feature 'services_job' (0.0051)\n",
      "36. feature 'basic.4y_education' (0.0051)\n",
      "37. feature 'retired_job' (0.0048)\n",
      "38. feature 'management_job' (0.0048)\n",
      "39. feature 'default_unknown' (0.0044)\n",
      "40. feature 'oct  ' (0.0041)\n",
      "41. feature 'apr  ' (0.0039)\n",
      "42. feature 'self-employed_job' (0.0037)\n",
      "43. feature 'basic.6y_education' (0.0037)\n",
      "44. feature 'entrepreneur_job' (0.0033)\n",
      "45. feature 'unknown_education' (0.0033)\n",
      "46. feature 'student_job' (0.0032)\n",
      "47. feature 'sep  ' (0.0032)\n",
      "48. feature 'poutcome_nonexistent' (0.0030)\n",
      "49. feature 'unemployed_job' (0.0026)\n",
      "50. feature 'housemaid_job' (0.0026)\n",
      "51. feature 'mar  ' (0.0024)\n",
      "52. feature 'jul  ' (0.0019)\n",
      "53. feature 'nov  ' (0.0018)\n",
      "54. feature 'aug  ' (0.0018)\n",
      "55. feature 'loan_unknown' (0.0018)\n",
      "56. feature 'housing_unknown' (0.0014)\n",
      "57. feature 'jun  ' (0.0014)\n",
      "58. feature 'unknown_status' (0.0009)\n",
      "59. feature 'unknown_job' (0.0007)\n",
      "60. feature 'dec  ' (0.0003)\n",
      "61. feature 'illiterate_education' (0.0001)\n"
     ]
    }
   ],
   "source": [
    "os_model = RandomForestClassifier(n_jobs=-1, random_state=2016).fit(osX_train, osy_train)\n",
    "os_importances = os_model.feature_importances_\n",
    "os_indices = np.argsort(os_importances)[::-1]\n",
    "\n",
    "print(\"Feature importances:\")\n",
    "for f, idx in enumerate(os_indices):\n",
    "    print(\"{:2d}. feature '{:5s}' ({:.4f})\".format(f + 1, data_columns[idx], os_importances[idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABEwAAAJ3CAYAAACObMTuAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xu8bGddH/7PN8SABFBBzJEoiXJTbiLUGIuFTVEMKISK\n1XiDotK0iqK2CrbVHNDqD3wVbxQ1GC8oNXiDxAsaqjkKIhBCAJEEAgJNhGIRRETUEL6/P9bayZwn\n+5w9s/ecc3bOeb9fr/3ae9as9Z1nZtasWfszz/NMdXcAAAAAuNlJx7oBAAAAAHuNwAQAAABgIDAB\nAAAAGAhMAAAAAAYCEwAAAICBwAQAAABgIDABAPacqvrpqvqvx7odAMCJq7r7WLcBAFiTqnpXkk9L\n8rEklaST3Lu7/+8uaj48ya9092eupZG3MlX1C0mu6+4fONZtAQCOnpOPdQMAgLXqJF/e3ZevseZm\n8LKzjatu0903rrE9R01V6Y0LACcoJwEAcPypLRdWnV1Vf1pVH6yqq+aeI5vX/buqektV/V1Vvb2q\n/v28/PZJfi/J3arqw/P1+6rqF6rqWQvbP7yqrlu4/M6q+t6qemOSv6+qk6rq06vqN6rqr6vqHVX1\n7Ye8Awv1N2tX1fdU1fuq6q+q6tyqenRVvbWq3l9V37ew7QVV9etVdfHc3tdV1QMXrv+cqrp8fhz+\nvKoeO9zu86vqd6vqw0m+OcnXJ/neudYl83pPnx+nv6uqN1fV4xdqPKmqXlFVP1pVH5jv6zkL139K\nVf38fD/+pqp+a+G6r5ifmw9W1Sur6gEL1z29qq6fb/PqqnrEoR4/AGD3BCYAcAKoqrsl+Z0kz+ru\nT0nyn5P8ZlXdZV7lfUke0913SvLkJD9WVQ/q7n9I8ugk7+nuO3b3nQ4zvGfshXLevO0nz9f9dpKr\nknx6kkcmeVpVfemSd2FfklOS3C3JBUlekCnI+PwkD0vy/VV1xsL6j0vy4iSfkuRXk7y0qm5TVSfP\n7fj9JHdN8h1JXlRV91rY9muT/GB33zHJC5O8KMlz5vt+7rzO25M8dH68npnkV6rqtIUaZyW5Osld\nkvxokosWrvuVJJ+Y5HMzDZ/6sSSpqs+f13tKkjsn+dkkl1bVJ1TVvZN8W5KHzLf5ZUneteRjBwDs\ngMAEAI4/L517NnxgoffCNyT53e7+gyTp7j9M8rokj5kvv6y73zX//YoklyX5V7tsx09093u6+5+S\n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\nyWWZApaLuvvqqjp/urov7O7fq6rHVNXbk3wkyZMPt+0RuzcAAAAAa7DtHCYAAAAAJ5plhuQAAAAA\nnFAEJrNELp2ZAAAgAElEQVSqulNV3XnzZxd1br/Odu3g9k+tqpPmv+9dVY+rqk9Yscbttlj2qTto\nyxlV9SXz359YVXdctcbxoqpuu8yyJeqs4/nddQ32tqo6paruP//s6rmtqpOq6k7ratsObv+Uqnpg\nVT1gngtrJzX2zfv5Y6tq37rbeLTtlWPrOvezXbThAcfidg/nWL9m9pLj4fVbVZ+1zLLDbH+bqvqu\nNbbnuDqe7RXz/wE7PpZW1bOXWbbXzfvr5Tvc9sGH+1l3W08k8/n6C6rqsqr6o82fY92uE8WtfkhO\nVZ2e5IwszMfS3X+ywvbnJ3lmkn/M9AXWc4n+7BXb8S+T/FySO3T33avq85Kc393fusS2hw1ouvsD\nK7TjyiT/KsmnJPnTTBPv/nN3f/0KNf48yVO6+9Xz5Sdk+troe69Q4ylJ/n2SO3f3ParqXkl+prsf\nuWyNuc6/THJmDn5+X7jC9j+Y5Jnd/bH58p2S/ER3P3mFGvdIcn13/1NVbSR5YJIXdvffrlDj9d39\n4O2WLVFnHc/vrmvMdT5vrpMkr+juN664/dmZvkh+8/VbmV57S+9nc52vTPLsJJ8219iss/Q/LFX1\n0CRv6O6PzF9//uBM+8m7t9l0c/vLc/Px4ybd/a+XbcNc5zZJTsvB+/v/WbHGRpJfSvKuTI/FZyZ5\n0orHxf+V5D8kuTHT/rH5uvnRbbb78e7+zpq+an6rx+Nxy7ZhrvflSX4myTsy3ZfPynRcfdkKNb4l\nyQ8k+aO5xsOTPKu7f37J7U9L8sNJ7tbdj66q+yb5ou6+aMntt3wsNu3gMVnXsXW3750b2f1+9pVJ\nvjjT4/PK7n7Jstsu1HhFktsm+cUkL+ruD61aY66z28djR6+ZocY63mtul+Rbs/C4Jvnp7v7HZWss\n1NrtY7IXXr8PTbI/t3yfWfoc7xDv31d290NWqPHa7j5r2fUPU2dXj8dCnd0+t2vZz3b7nldVd8n0\n/D50oR3P6u6/WaHGFyT5+SR3zPSY/m2Sb+ruK5etMdfZaj95U3c/cMU6uzouruO5qao/TPKVqx5P\ntwlaegfnRG9KcnGSF3f3O1bZdqHGh3PL9+APJXldkv/U3X+5ZJ1dH0vmOjva56vqjZmOp1dmep/Z\n3Hal/XSutatz3rnGZyf5iSRflOTjSf4syXet8HieneQvuvvD8+U7Jfnc7n7NivfltkmekFv+r/is\nVepsezu35sBkTm6/JslbcvPO06ucgFbVtZlOft+/y7a8JslXJbm0uz9/Xvbm7r7/Etu+M9OLuTJ9\nDfMH578/Ocn/6e5VPsl4fXc/uKq+PckndvdzquoN3f2gFWo8INObx4Ekd0tylyTf0t3Xr1DjDUnO\nSvKahcfjz7t76U8Dq+qXk9wjyRty8PP7HSvU+JEkj8o0EfFpSZ6X5Ke6+3kr1HhDkn+R6cX4e0ku\nSXK/7n7MEtvuS3J6kl9J8nWZntdkOpn+me7+nGXbMddbx/O7jhpPS/KUJL81L/o3SS7s7p9aocbV\nSb43tzz4v2/ZGnOdtyd57G4mlJ7flD8v0z8ov5gp/Pzq7n74ktsvnjjfLtPB+2Pd/b0rtOHbMwVI\n78v05pNM+/uqJ1tXJvm67n7rfPneSX51xZP7N3T3g6rq6zO9kT4jyZXbtaWqHtLdV1bVlo9bd//x\n0ndkqndNkq/o7rfPl++R5HdXed1U1VuT/MvNE+j5BPtV3X2fJbd/WZJfSPJfu/vzqurkJFcteyxb\neCy+Msm+TMeCJPnaJO/r7pU+eV7TsXUd75272s+q6vlJ7pnkV+dFX5PkHd39bcu2YaHWvZJ8U5J/\nm+S1SX6hu1++wvbreDx29JoZa2SH7zULNX4tyYdz8372dUk+ubv/7bI15jrreEz2wuv3miTflVu+\nz2z7D3VVfU6S+yV5TpLvWbjqTkm+p7vvt8L9+LEkn5DkxZm+HGGzHa9ftsZcZ1ePx7zNOp7bXe9n\n63jPq6qXJ/mThXZ8fZKN7v6SFWq8Kcm3dfcr5stfnOT5y7ajqv5jpoDiszOFg5vumORPu/sbVmjL\nro+La3puLkny+UlenoP316XPv9ehqs7I9Bh8TaZ95MVJfm3FUO0Hk1yf5H9lOgc/L9P/Fq9P8h+7\ne2PJOjs+lizU2PE+v2pIu02tXZ3zzjVeneR/5uZ99bwk397dX7jk9lcleXDPQURNPd9fN4aOS9T5\n/UwB2Pi8/I9V6myru2+1P0nemuS2u6zx+0luv4a2vGb+fdXCsjeuWOMFSR6zcPnRSX52xRpXZUr7\nXp3pRCtJ/nwH9+fxmQ6470lyz90+HplSvzetWOPqzKHeLp+bRyb56C7uy+vn39+T6WBw0PO8zbZP\n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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1ca848fa9b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "d_first = tr_data.shape[1]\n",
    "plt.figure(figsize=(19, 8))\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(range(d_first), os_importances[os_indices[:d_first]], align='center')\n",
    "plt.xticks(range(d_first), np.array(data_columns)[os_indices[:d_first]], rotation=90)\n",
    "plt.xlim([-1, d_first]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что наиболее важными являются лишь 10 признаков из всех, остальные же мало влияют на качество модели."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Возьмём для рассмотрения 4 алгоритма: Logistic Regression, Random Forest, Gradient Boosting, XGBoost. Посмотрим, какое качество эти алгоритмы покажут на валидационной выборке без настройки параметров."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.91840376289851411"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, os_model.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94260686589748444"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, LogisticRegression(random_state=2016).fit(osX_train, osy_train).predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94596547086144211"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, GradientBoostingClassifier(random_state=2016).fit(osX_train, osy_train).predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94791732341382429"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, XGBClassifier(seed=2016).fit(osX_train, osy_train).predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Попробуем настроить два алгоритма, показавших наилучший результат."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Настройка алгоритмов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Настройка GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def show_gs_results(estimator):\n",
    "    return estimator.grid_scores_, estimator.best_params_, estimator.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для начала установим фиксированное значение некоторых параметров:\n",
    "learning_rate=0.1, \n",
    "min_samples_leaf=50, \n",
    "max_features='sqrt', \n",
    "subsample=0.8, \n",
    "random_state=2016"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.87964254565706246"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, GradientBoostingClassifier(learning_rate=0.1, min_samples_leaf=50, max_features='sqrt', subsample=0.8, random_state=2016).fit(osX_train, osy_train).predict(X_valid))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# подбор глубины и минимального количества объектов при разбиении\n",
    "tune_grid1 = {'max_depth': np.arange(4,12,2), 'min_samples_split': np.arange(200,800,200)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 54s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gsearch1 = GridSearchCV(estimator = GradientBoostingClassifier(learning_rate=0.1, min_samples_leaf=50, max_features='sqrt', subsample=0.8, random_state=2016), param_grid=tune_grid1, scoring='roc_auc', n_jobs=-1, cv=5)\n",
    "gsearch1.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.95033, std: 0.00358, params: {'min_samples_split': 200, 'max_depth': 4},\n",
       "  mean: 0.95035, std: 0.00377, params: {'min_samples_split': 400, 'max_depth': 4},\n",
       "  mean: 0.94992, std: 0.00369, params: {'min_samples_split': 600, 'max_depth': 4},\n",
       "  mean: 0.95805, std: 0.00315, params: {'min_samples_split': 200, 'max_depth': 6},\n",
       "  mean: 0.95690, std: 0.00344, params: {'min_samples_split': 400, 'max_depth': 6},\n",
       "  mean: 0.95577, std: 0.00336, params: {'min_samples_split': 600, 'max_depth': 6},\n",
       "  mean: 0.96489, std: 0.00307, params: {'min_samples_split': 200, 'max_depth': 8},\n",
       "  mean: 0.96229, std: 0.00293, params: {'min_samples_split': 400, 'max_depth': 8},\n",
       "  mean: 0.96067, std: 0.00318, params: {'min_samples_split': 600, 'max_depth': 8},\n",
       "  mean: 0.97013, std: 0.00292, params: {'min_samples_split': 200, 'max_depth': 10},\n",
       "  mean: 0.96623, std: 0.00285, params: {'min_samples_split': 400, 'max_depth': 10},\n",
       "  mean: 0.96380, std: 0.00295, params: {'min_samples_split': 600, 'max_depth': 10}],\n",
       " {'max_depth': 10, 'min_samples_split': 200},\n",
       " 0.9701348900952201)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(gsearch1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94940025849568122"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gsearch1.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# подбор минимального количество объектов в листе\n",
    "tune_grid2 = {'min_samples_leaf': [20,50,100,200,500]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 2min 21s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gsearch2 = GridSearchCV(estimator = GradientBoostingClassifier(learning_rate=0.1, min_samples_split=200, max_depth=10, max_features='sqrt', subsample=0.8, random_state=2016), param_grid=tune_grid2, scoring='roc_auc', n_jobs=-1, cv=5)\n",
    "gsearch2.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.97215, std: 0.00284, params: {'min_samples_leaf': 20},\n",
       "  mean: 0.97013, std: 0.00292, params: {'min_samples_leaf': 50},\n",
       "  mean: 0.96667, std: 0.00276, params: {'min_samples_leaf': 100},\n",
       "  mean: 0.96106, std: 0.00321, params: {'min_samples_leaf': 200},\n",
       "  mean: 0.95460, std: 0.00356, params: {'min_samples_leaf': 500}],\n",
       " {'min_samples_leaf': 20},\n",
       " 0.9721466175996321)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(gsearch2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95016339869281041"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gsearch2.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# подбор subsample\n",
    "tune_grid3 = {'subsample': [0.6, 0.7, 0.75, 0.8, 0.85, 0.9, 1.0]}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 29s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gsearch3 = GridSearchCV(estimator = GradientBoostingClassifier(learning_rate=0.1, max_depth=10, min_samples_split=200, min_samples_leaf=20, subsample=0.8, random_state=2016, max_features='sqrt'), param_grid=tune_grid3, scoring='roc_auc', n_jobs=-1, cv=5)\n",
    "gsearch3.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.96920, std: 0.00301, params: {'subsample': 0.6},\n",
       "  mean: 0.97105, std: 0.00253, params: {'subsample': 0.7},\n",
       "  mean: 0.97188, std: 0.00300, params: {'subsample': 0.75},\n",
       "  mean: 0.97215, std: 0.00284, params: {'subsample': 0.8},\n",
       "  mean: 0.97232, std: 0.00257, params: {'subsample': 0.85},\n",
       "  mean: 0.97304, std: 0.00288, params: {'subsample': 0.9},\n",
       "  mean: 0.97368, std: 0.00236, params: {'subsample': 1.0}],\n",
       " {'subsample': 1.0},\n",
       " 0.9736798293918175)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(gsearch3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94799744656705121"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gsearch3.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на значения качества при варьировании параметров learning_rate и n_estimators, используя исходные фиксированные параметры и полученные параметры при настройке."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 26.8 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gbm_tuned_1 = GradientBoostingClassifier(learning_rate=0.05, n_estimators=200, max_depth=10, min_samples_split=200, min_samples_leaf=20, subsample=1.0, random_state=2016, max_features='sqrt')\n",
    "gbm_tuned_1.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95077417354937699"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gbm_tuned_1.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 29.5 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gb1 = GradientBoostingClassifier(max_depth=10, learning_rate=0.05, min_samples_leaf=50, min_samples_split=200, n_estimators=200, max_features='sqrt', subsample=0.8, random_state=2016)\n",
    "gb1.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94987968392072797"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gb1.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1min 26s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gbm_tuned_2 = GradientBoostingClassifier(learning_rate=0.01, n_estimators=600, max_depth=10, min_samples_split=200, min_samples_leaf=20, subsample=1.0, random_state=2016, max_features='sqrt')\n",
    "gbm_tuned_2.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95046550238530558"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gbm_tuned_2.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1min 14s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gb2 = GradientBoostingClassifier(max_depth=10, learning_rate=0.01, min_samples_leaf=50, min_samples_split=200, n_estimators=600, max_features='sqrt', subsample=0.8, random_state=2016)\n",
    "gb2.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95046681587962079"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gb2.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 48s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gbm_tuned_3 = GradientBoostingClassifier(learning_rate=0.005, n_estimators=1500, max_depth=10, min_samples_split=200, min_samples_leaf=20, subsample=1.0, random_state=2016, max_features='sqrt', warm_start=True)\n",
    "gbm_tuned_3.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95071900678813859"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gbm_tuned_3.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 13s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "gb3 = GradientBoostingClassifier(max_depth=10, learning_rate=0.005, min_samples_leaf=50, min_samples_split=200, n_estimators=1500, max_features='sqrt', subsample=0.8, random_state=2016, warm_start=True)\n",
    "gb3.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95091077695815729"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gb3.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что лучшее качество на валидационной выборке достигается при параметрах max_depth=10, learning_rate=0.005, min_samples_leaf=50, min_samples_split=200, n_estimators=1500, max_features='sqrt', subsample=0.8, random_state=2016, warm_start=True\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим, что будет с качеством, если обучать настроенный алгоритм на исходных несбалансированных данных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingClassifier(criterion='friedman_mse', init=None,\n",
       "              learning_rate=0.005, loss='deviance', max_depth=10,\n",
       "              max_features='sqrt', max_leaf_nodes=None,\n",
       "              min_impurity_split=1e-07, min_samples_leaf=50,\n",
       "              min_samples_split=200, min_weight_fraction_leaf=0.0,\n",
       "              n_estimators=1500, presort='auto', random_state=2016,\n",
       "              subsample=0.8, verbose=0, warm_start=True)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb_not_os = GradientBoostingClassifier(max_depth=10, learning_rate=0.005, min_samples_leaf=50, min_samples_split=200, n_estimators=1500, max_features='sqrt', subsample=0.8, random_state=2016, warm_start=True)\n",
    "gb_not_os.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95215991005190936"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, gb_not_os.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Качество заметно улучшилось!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Настройка XGBoost"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Также установим начальные фиксированные параметры."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "params={\n",
    "    'objective': 'binary:logistic',\n",
    "    'silent':1,\n",
    "    'seed':2016,\n",
    "    'nthread':-1,\n",
    "    'scale_pos_weight':1,\n",
    "    'learning_rate':0.1,\n",
    "    'gamma':0\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94791732341382429"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, XGBClassifier(**params).fit(osX_train, osy_train).predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# настройка глубины\n",
    "param_test1 = {'max_depth':np.arange(4,11,1)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 2s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgsearch1 = GridSearchCV(estimator = XGBClassifier(**params), \n",
    " param_grid = param_test1, scoring='roc_auc',n_jobs=-1, cv=5)\n",
    "xgsearch1.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.95495, std: 0.00318, params: {'max_depth': 4},\n",
       "  mean: 0.95944, std: 0.00293, params: {'max_depth': 5},\n",
       "  mean: 0.96453, std: 0.00253, params: {'max_depth': 6},\n",
       "  mean: 0.96998, std: 0.00200, params: {'max_depth': 7},\n",
       "  mean: 0.97497, std: 0.00194, params: {'max_depth': 8},\n",
       "  mean: 0.98024, std: 0.00202, params: {'max_depth': 9},\n",
       "  mean: 0.98371, std: 0.00152, params: {'max_depth': 10}],\n",
       " {'max_depth': 10},\n",
       " 0.9837114072170798)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(xgsearch1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94787660509005323"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, xgsearch1.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params['max_depth'] = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# настройка subsample и colsample_bytree\n",
    "param_test2 = {\n",
    " 'subsample':[i/10.0 for i in range(6,10)],\n",
    " 'colsample_bytree':[i/10.0 for i in range(6,10)]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 8min 43s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgsearch2 = GridSearchCV(estimator = XGBClassifier(**params), \n",
    " param_grid = param_test2, scoring='roc_auc', n_jobs=-1, cv=5)\n",
    "xgsearch2.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.98505, std: 0.00210, params: {'colsample_bytree': 0.6, 'subsample': 0.6},\n",
       "  mean: 0.98621, std: 0.00199, params: {'colsample_bytree': 0.6, 'subsample': 0.7},\n",
       "  mean: 0.98641, std: 0.00224, params: {'colsample_bytree': 0.6, 'subsample': 0.8},\n",
       "  mean: 0.98699, std: 0.00232, params: {'colsample_bytree': 0.6, 'subsample': 0.9},\n",
       "  mean: 0.98530, std: 0.00195, params: {'colsample_bytree': 0.7, 'subsample': 0.6},\n",
       "  mean: 0.98601, std: 0.00159, params: {'colsample_bytree': 0.7, 'subsample': 0.7},\n",
       "  mean: 0.98625, std: 0.00156, params: {'colsample_bytree': 0.7, 'subsample': 0.8},\n",
       "  mean: 0.98642, std: 0.00142, params: {'colsample_bytree': 0.7, 'subsample': 0.9},\n",
       "  mean: 0.98472, std: 0.00154, params: {'colsample_bytree': 0.8, 'subsample': 0.6},\n",
       "  mean: 0.98546, std: 0.00193, params: {'colsample_bytree': 0.8, 'subsample': 0.7},\n",
       "  mean: 0.98563, std: 0.00180, params: {'colsample_bytree': 0.8, 'subsample': 0.8},\n",
       "  mean: 0.98598, std: 0.00160, params: {'colsample_bytree': 0.8, 'subsample': 0.9},\n",
       "  mean: 0.98468, std: 0.00179, params: {'colsample_bytree': 0.9, 'subsample': 0.6},\n",
       "  mean: 0.98501, std: 0.00135, params: {'colsample_bytree': 0.9, 'subsample': 0.7},\n",
       "  mean: 0.98552, std: 0.00183, params: {'colsample_bytree': 0.9, 'subsample': 0.8},\n",
       "  mean: 0.98519, std: 0.00197, params: {'colsample_bytree': 0.9, 'subsample': 0.9}],\n",
       " {'colsample_bytree': 0.6, 'subsample': 0.9},\n",
       " 0.9869916687756364)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(xgsearch2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94829035579934018"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, xgsearch2.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params['colsample_bytree'] = 0.6\n",
    "params['subsample']= 0.9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "param_test3 = {\n",
    " 'reg_alpha':[0.01, 0.1, 1, 10, 100]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 2min 9s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgsearch3 = GridSearchCV(estimator = XGBClassifier(**params), \n",
    " param_grid = param_test3, scoring='roc_auc',n_jobs=-1, cv=5)\n",
    "xgsearch3.fit(osX_train,osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([mean: 0.98686, std: 0.00226, params: {'reg_alpha': 0.01},\n",
       "  mean: 0.98683, std: 0.00242, params: {'reg_alpha': 0.1},\n",
       "  mean: 0.98579, std: 0.00202, params: {'reg_alpha': 1},\n",
       "  mean: 0.97002, std: 0.00275, params: {'reg_alpha': 10},\n",
       "  mean: 0.94880, std: 0.00381, params: {'reg_alpha': 100}],\n",
       " {'reg_alpha': 0.01},\n",
       " 0.9868626456841428)"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "show_gs_results(xgsearch3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94914938108147862"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, xgsearch3.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params['reg_alpha'] = 0.01"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Настроенные параметры"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'colsample_bytree': 0.6,\n",
       " 'gamma': 0,\n",
       " 'learning_rate': 0.1,\n",
       " 'max_depth': 10,\n",
       " 'nthread': -1,\n",
       " 'objective': 'binary:logistic',\n",
       " 'reg_alpha': 0.01,\n",
       " 'scale_pos_weight': 1,\n",
       " 'seed': 2016,\n",
       " 'silent': 1,\n",
       " 'subsample': 0.9}"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Установим новые значения learning_rate и n_estimators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "params['learning_rate']=0.001\n",
    "params['n_estimators']=5000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 5min 36s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgb = XGBClassifier(**params)\n",
    "xgb.fit(osX_train, osy_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95067303448710672"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, xgb.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим, что будет с качеством, если обучать настроенный алгоритм на исходных несбалансированных данных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 2min 58s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgb_not_os = XGBClassifier(**params)\n",
    "xgb_not_os.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95272996658470466"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_valid, xgb_not_os.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видно, что также качество заметно улучшилось."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим, может получится еще повысить качество, если объединить GradientBoostingClassifier и XGBoost в композицию?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95335518987873813"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vclf = VotingClassifier(estimators=[('gb_not_os', gb_not_os), ('xgb_not_os', xgb_not_os)], voting='soft', n_jobs=-1)\n",
    "vclf.fit(X_train, y_train)\n",
    "roc_auc_score(y_valid, vclf.predict_proba(X_valid)[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Найдем ответы по тестовой выборке"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проведем необходимую предобработку"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "test_data = pd.read_csv('test_data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Удаление ненужных столбцов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "test_data = test_data.drop('Unnamed: 0', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nominal columns: ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome']\n",
      "\n",
      "Numerical columns: ['age', 'duration', 'campaign', 'pdays', 'previous', 'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed']\n"
     ]
    }
   ],
   "source": [
    "# Nominal columns\n",
    "nom_cols_test = [c for c in test_data.columns if test_data[c].dtype.name == 'object']\n",
    "print(\"Nominal columns:\", nom_cols_test)\n",
    "\n",
    "# Numerical columns\n",
    "num_cols_test = [c for c in test_data.columns if test_data[c].dtype.name != 'object']\n",
    "print(\"\\nNumerical columns:\", num_cols_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Кодировка категориальных признаков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_data.at[test_data['contact']=='cellular', 'contact'] = 0\n",
    "test_data.at[test_data['contact']=='telephone', 'contact'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nom_cols_test.remove('contact')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nominal features encoding started...\n",
      "   Feature job - encoded\n",
      "   Feature marital - encoded\n",
      "   Feature education - encoded\n",
      "   Feature default - encoded\n",
      "   Feature housing - encoded\n",
      "   Feature loan - encoded\n",
      "   Feature month - encoded\n",
      "   Feature day_of_week - encoded\n",
      "   Feature poutcome - encoded\n",
      "Nominal features encoding completed. Total features encoded:  9\n"
     ]
    }
   ],
   "source": [
    "test_data = encode_nominal_features(test_data, nom_cols_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Предсказания"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pr3 = gb3.predict_proba(test_data)[:,1]\n",
    "gb3_df = pd.DataFrame(data=pr3, columns=['Prediction'])\n",
    "gb3_df.to_csv('gb3_pred_proba.csv', index_label='Id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "gb_not_os_pred = gb_not_os.predict_proba(test_data)[:,1]\n",
    "gb_not_os_df = pd.DataFrame(data=gb_not_os_pred, columns=['Prediction'])\n",
    "gb_not_os_df.to_csv('gb_not_os_pred_proba.csv', index_label='Id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "xgb_pred = xgb.predict_proba(test_data.values)\n",
    "xgb_df = pd.DataFrame(data=xgb_pred[:,1], columns=['Prediction'])\n",
    "xgb_df.to_csv('xgb_pred_proba.csv', index_label='Id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "xgb_not_os_pred = xgb_not_os.predict_proba(test_data.values)\n",
    "xgb_not_os_df = pd.DataFrame(data=xgb_not_os_pred[:,1], columns=['Prediction'])\n",
    "xgb_not_os_df.to_csv('xgb_not_os_pred_proba.csv', index_label='Id')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Composition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "vclf_pred = vclf.predict_proba(test_data.values)\n",
    "vclf_pred_df = pd.DataFrame(data=vclf_pred[:,1], columns=['Prediction'])\n",
    "vclf_pred_df.to_csv('vclf_pred_proba.csv', index_label='Id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
